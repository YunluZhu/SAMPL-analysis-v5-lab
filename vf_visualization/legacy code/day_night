'''
t-SNE with aligned raw bout data
15-46
low perp for clustering
high perp to protect global structure
NOTE
UPDATE 211127 heading only took idx==30, added sample for plot
'''

#%%
import sys
import os,glob
import time
import pandas as pd
from plot_functions.plt_tools import round_half_up 
import numpy as np # numpy
import seaborn as sns
# import matplotlib
import matplotlib.pyplot as plt
# from mpl_toolkits.mplot3d import Axes3D

# from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.manifold import TSNE

# from collections import defaultdict
# from datetime import datetime
# from datetime import timedelta
# import math
from scipy import stats
# %%
# Paste root directory here

pick_data = 'ori'

if pick_data == 'ori':
    root = "/Volumes/LabData/VF_data_in_use/resliced/combined_7DD_data_resliced"
elif pick_data == 'hets':
    root = "/Volumes/LabData/VF_data_in_use/resliced/combined_7DD_hets_resliced/combined_7DD_NTau-hets_data"
elif pick_data == 'ld':
    root = "/Volumes/LabData/VF_data_in_use/resliced/combined_7LD_resliced"
elif pick_data =='s':
    root = "/Volumes/LabData/VF_STau_in_use"
    
fig_dir = "/Users/yunluzhu/Documents/Lab2/Data/VF_ana/Figures/NT_tmp_plots_PCA_Raw"

global DayNight_select 
DayNight_select = 'all' # day or night or all

# %%
# CONSTANTS

ALIGNED_BOUT_RANGE = range(15,46)


# HEADING_LIM = 90
# HEADING_LIM = 180
# FIN_BODY_LOW_LIM = -10  # lower pitch change limit to plot fin_body sigmoid fit and binned data
# FIN_BODY_UP_LIM = 15  # 
# X_RANGE = np.arange(-10,15.01,0.01)
# BIN_WIDTH = 0.8  
# AVERAGE_BIN = np.arange(-10,15,BIN_WIDTH)

# %%
def defaultPlotting(): 
    sns.set(rc={"xtick.labelsize":'large',"ytick.labelsize":'large', "axes.labelsize":'x-large'},style="ticks")

def day_night_split(df,time_col_name):
    hour = df[time_col_name].dt.strftime('%H').astype('int')
    if DayNight_select == 'day':
        df_out = df.loc[hour[(hour>=9) & (hour<23)].index, :]
    elif DayNight_select == 'night':
        df_out = df.loc[hour[(hour<9) | (hour>=23)].index, :]
    elif DayNight_select == 'all':
        df_out = df
    return df_out

# def distribution_binned_average(df, condition):
#     '''
#     bins raw pitch data using fixed bin width. Return binned mean of pitch and bout frequency.
#     '''
#     df = df.sort_values(by='pre_posture_chg')
#     bins = pd.cut(df['pre_posture_chg'], list(AVERAGE_BIN))
#     grp = df.groupby(bins)
#     df_out = grp[['pre_posture_chg','atk_ang']].mean().assign(dpf=condition[0],condition=condition[4:])
#     return df_out
# %%
# get data 
all_conditions = []
folder_paths = []
# get the name of all folders under root
for folder in os.listdir(root):
    if folder[0] != '.':
        folder_paths.append(root+'/'+folder)
        all_conditions.append(folder)
        
# jackknifed_coef = pd.DataFrame()  # coef results calculated with jackknifed pitch data
# jackknifed_y = pd.DataFrame()  # fitted y using jackknifed pitch data

all_cond_bouts = pd.DataFrame()
mean_data_cond = pd.DataFrame()
all_cond_feature = pd.DataFrame()

hue_order = list()

# binned_atk_angles = pd.DataFrame()
# go through each condition folders under the root
for condition_idx, folder in enumerate(folder_paths):
    # enter each condition folder (e.g. 7dd_ctrl)
    for subpath, subdir_list, subfile_list in os.walk(folder):
        # if folder is not empty
        if subdir_list:
            all_bouts_data = pd.DataFrame()
            all_feature_data = pd.DataFrame()
            # mean_data = pd.DataFrame()
            # loop through each sub-folder (experiment) under each condition
            for expNum, exp in enumerate(subdir_list):
                # - attack angle calculation
                exp_path = os.path.join(subpath, exp)
                angles = pd.read_hdf(f"{exp_path}/bout_data.h5", key='prop_bout_aligned').loc[:,[
                    'propBoutAligned_heading',
                    'propBoutAligned_pitch',
                    'propBoutAligned_speed',
                    'propBoutAligned_time']]
                angles = angles.assign(idx=round_half_up(len(angles)/51)*list(range(0,51)))          
            # extract features
                peak_angles = angles.loc[angles['idx']==30]
                peak_angles = peak_angles.assign(
                    time = pd.read_hdf(f"{exp_path}/bout_data.h5", key='prop_bout2')['aligned_time'].values,
                    )  # peak angle
                peak_angles_day = day_night_split(peak_angles, 'time')
                # peak_angles_day = peak_angles_day.dropna()
                # # filter for angles meet the condition
                # peak_angles_day = peak_angles_day.loc[(peak_angles_day['propBoutAligned_heading']<HEADING_LIM) & 
                #                                       (peak_angles_day['propBoutAligned_heading']>-HEADING_LIM)]
                
                # calculate individual attack angles (heading - pitch)
                atk_ang = peak_angles_day['propBoutAligned_heading'] - peak_angles_day['propBoutAligned_pitch']
                
                # get indices of bout peak (for posture change calculation)
                peak_idx = peak_angles_day.index
                # calculate posture change calculation. NOTE change if frame rate changes
                pre_posture_chg = angles.loc[peak_idx-2, 'propBoutAligned_pitch'].values - angles.loc[peak_idx-4, 'propBoutAligned_pitch']
                # try 100ms after peak, NOTE change if frame rate changes
                righting_rot = angles.loc[peak_idx+4, 'propBoutAligned_pitch'].values - angles.loc[peak_idx, 'propBoutAligned_pitch']
                steering_rot = angles.loc[peak_idx, 'propBoutAligned_pitch'].values - angles.loc[peak_idx-4, 'propBoutAligned_pitch']
                
                bout_features = pd.DataFrame(data={'atk_ang':atk_ang.values, 
                                             'pre_posture_chg':pre_posture_chg.values, 
                                             'pre_pitch': angles.loc[peak_idx-4,'propBoutAligned_pitch'].values, # try 100ms before peak
                                             'end_pitch': angles.loc[peak_idx+4,'propBoutAligned_pitch'].values, # try 100ms after peak
                                             'accel_rot' : steering_rot.values,
                                             'decel_rot': righting_rot.values,
                                             'heading': peak_angles_day['propBoutAligned_heading'], 
                                             'pitch': peak_angles_day['propBoutAligned_pitch'],
                                             'speed': angles.loc[peak_idx, 'propBoutAligned_speed'].values,
                                             'accel_ang': angles.loc[peak_idx-2,'propBoutAligned_pitch'].values,
                                             'decel_ang': angles.loc[peak_idx+2,'propBoutAligned_pitch'].values,  # mid bout angel decel
                                             'expNum':[expNum]*len(pre_posture_chg),
                                             'date':exp[0:6],
                                             'time':peak_angles_day['time'],})   
                         

                all_feature_data = pd.concat([all_feature_data, bout_features])

             # raw bout data    
                angles_grp = angles.set_index('idx').groupby(np.arange(len(angles))//51)
                
                re_format = angles_grp.apply(
                    lambda x: pd.concat([
                        # x.iloc[ALIGNED_BOUT_RANGE,0].rename(lambda i: 'heading_'+str(i)),
                                        x.iloc[ALIGNED_BOUT_RANGE,1].rename(lambda i: 'pitch_'+str(i)),
                                        x.iloc[ALIGNED_BOUT_RANGE,2].rename(lambda i: 'speed_'+str(i)),
                                        ])
                )
                
                re_format = pd.concat([re_format, 
                                       angles_grp.propBoutAligned_time.head(1).reset_index().propBoutAligned_time,
                                       angles.loc[angles['idx']==30].reset_index().propBoutAligned_heading,
                                    #    boutNum[['boutNum','epochNum']]
                                       ],axis=1)
                
                # re_format_IEI = pd.concat([re_format.set_index(['boutNum', 'epochNum']),
                #                            IEIdata,
                #                           ],axis=1,join='inner').reset_index()
                             
                re_format_day = day_night_split(re_format,'propBoutAligned_time')
                all_bouts_data = pd.concat([all_bouts_data, re_format_day])
                
            all_cond_feature = pd.concat([all_cond_feature,all_feature_data.assign(condition=all_conditions[condition_idx])])
            all_cond_bouts = pd.concat([all_cond_bouts,all_bouts_data.assign(condition=all_conditions[condition_idx])])
all_cond_feature.reset_index(inplace=True,drop=True)
all_cond_bouts.reset_index(inplace=True,drop=True)
combined_all = pd.concat([all_cond_feature.drop(columns='condition'),all_cond_bouts],axis=1)
combined_all = combined_all.dropna().reset_index(drop=True)    
                                  
data_to_ana = all_cond_bouts.drop(['condition','propBoutAligned_time'],axis=1)
df_std = StandardScaler().fit_transform(data_to_ana)

all_conditions.sort()

# %%
hours = all_cond_feature['time'].dt.strftime('%H').astype('int')
day_night = []
res_toplt = all_cond_feature.assign(hours = hours)
res_toplt.loc[hours[(hours>=9) & (hours<23)].index, 'day_night'] = 'day'
res_toplt.loc[hours[(hours<9) | (hours>=23)].index, 'day_night'] = 'night'

# %%
daynight = res_toplt.groupby(['condition','date','day_night']).size().unstack()

daynight = daynight.assign(day_ratio = daynight.loc[:,'day']/(daynight.loc[:,'day']+daynight.loc[:,'night']),
                           night_ratio = daynight.loc[:,'night']/(daynight.loc[:,'day']+daynight.loc[:,'night']))
daynight.reset_index(inplace=True)

# %%
flatui = ["#D0D0D0"] * (daynight.groupby('condition').size()[0])

g = sns.pointplot(x='condition',y='night_ratio', hue='date', data=daynight,
                                        palette=sns.color_palette(flatui), scale=0.5,
                                        )
g = sns.pointplot(x='condition', y='night_ratio',hue='condition',data=daynight, 
                linewidth=0,
                alpha=0.9,
                ci=None,
                markers='d',
                #   order=['Sibs','Tau','Lesion'],
)
g.legend_.remove()
fig = g.get_figure()
fig.savefig(fig_dir+"/day_night_ratio_{}.pdf".format(pick_data),format='PDF')

# %%
ctrl_stat = daynight.loc[daynight['condition']==all_conditions[0],'night_ratio']
cond_stat = daynight.loc[daynight['condition']==all_conditions[1],'night_ratio']
ttest_res, ttest_p = stats.ttest_rel(ctrl_stat,cond_stat)
print(f'{all_conditions[0]} v.s. {all_conditions[1]} paired t-test p-value = {ttest_p}')
# %%
