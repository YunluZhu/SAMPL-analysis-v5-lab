
#%%
# import sys
import os,glob
import math
# import time
import pandas as pd
from plot_functions.plt_tools import round_half_up 
import numpy as np # numpy
import seaborn as sns
import matplotlib.pyplot as plt
# from astropy.stats import jackknife_resampling
# from astropy.stats import jackknife_stats
from collections import defaultdict
from datetime import datetime
from datetime import timedelta
import math
# from statsmodels.stats.multicomp import (pairwise_tukeyhsd, MultiComparison)
from plot_functions.get_data_dir import get_data_dir
from plot_functions.get_index import get_index

from plot_functions.plt_tools import (set_font_type, defaultPlotting, day_night_split)
from tqdm import tqdm



import matplotlib as mpl
mpl.rcParams['pdf.fonttype'] = 42

# %%
# Paste root directory here
pick_data = 'hc4'
root, FRAME_RATE= get_data_dir(pick_data)

folder_name = f'{pick_data}_boutPropertiesV4_time'
folder_dir = f'/Users/yunluzhu/Documents/Lab2/Data/SAMPL_ana/Figures/{pick_data}'
fig_dir = os.path.join(folder_dir, folder_name)

try:
    os.makedirs(fig_dir)
    print(f'fig folder created:{folder_name}')
except:
    print('Notes: re-writing old figures')
    
BIN_NUM = 4
idxRANGE = [round_half_up(0*FRAME_RATE),round_half_up(1.2*FRAME_RATE)]

# %% features for plotting
all_features = [
    'propBoutAligned_speed', 
    # 'propBoutAligned_accel',    # angular accel calculated using raw angular vel
    # 'linear_accel', 
    'propBoutAligned_pitch', 
    # 'propBoutAligned_angVel',   # smoothed angular velocity
    # 'propBoutInflAligned_accel',
    'propBoutAligned_instHeading', 
    'heading_sub_pitch',
            # 'propBoutAligned_x',
            # 'propBoutAligned_y', 
            # 'propBoutInflAligned_angVel',
            # 'propBoutInflAligned_speed', 
            # 'propBoutAligned_angVel_hDn',
            # # 'propBoutAligned_speed_hDn', 
            # 'propBoutAligned_pitch_hDn',
            # # 'propBoutAligned_angVel_flat', 
            # # 'propBoutAligned_speed_flat',
            # # 'propBoutAligned_pitch_flat', 
            # 'propBoutAligned_angVel_hUp',
            # # 'propBoutAligned_speed_hUp', 
            # 'propBoutAligned_pitch_hUp', 
    # 'ang_speed',
    # 'ang_accel_of_SMangVel',    # angular accel calculated using smoothed angVel

]

# %%
# CONSTANTS
HEADING_LIM = 90
peak_idx , total_aligned = get_index(FRAME_RATE)

# %%

set_font_type()
# defaultPlotting()

# %%
all_conditions = []
folder_paths = []
# get the name of all folders under root
for folder in os.listdir(root):
    if folder[0] != '.':
        folder_paths.append(root+'/'+folder)
        all_conditions.append(folder)


all_around_peak_data = pd.DataFrame()
all_cond0 = []
all_cond0 = []

# go through each condition folders under the root
for condition_idx, folder in enumerate(folder_paths):
    # enter each condition folder (e.g. 7dd_ctrl)
    for subpath, subdir_list, subfile_list in os.walk(folder):
        # if folder is not empty
        if subdir_list:
            # reset for each condition
            around_peak_data = pd.DataFrame()
            # loop through each sub-folder (experiment) under each condition
            for expNum, exp in enumerate(subdir_list):
                # angular velocity (angVel) calculation
                rows = []
                # for each sub-folder, get the path
                exp_path = os.path.join(subpath, exp)
                # get pitch                
                exp_data = pd.read_hdf(f"{exp_path}/bout_data.h5", key='prop_bout_aligned')#.loc[:,['propBoutAligned_angVel','propBoutAligned_speed','propBoutAligned_accel','propBoutAligned_heading','propBoutAligned_pitch']]
                exp_data = exp_data.assign(ang_speed=exp_data['propBoutAligned_angVel'].abs())
                # assign frame number, total_aligned frames per bout
                exp_data = exp_data.assign(idx=round_half_up(len(exp_data)/total_aligned)*list(range(0,total_aligned)))
                
                # - get the index of the rows in exp_data to keep (for each bout, there are range(0:51) frames. keep range(20:41) frames)
                bout_time = pd.read_hdf(f"{exp_path}/bout_data.h5", key='prop_bout2').loc[:,['aligned_time']]
                # for i in bout_time.index:
                # # if only need day or night bouts:
                for i in day_night_split(bout_time,'aligned_time').index:
                    rows.extend(list(range(i*total_aligned+idxRANGE[0],i*total_aligned+idxRANGE[1])))
                exp_data = exp_data.assign(expNum = expNum,
                                           exp_id = condition_idx*100+expNum)
                around_peak_data = pd.concat([around_peak_data,exp_data.loc[rows,:]])
            # combine data from different conditions
            cond1 = all_conditions[condition_idx].split("_")[0]
            all_cond0.append(cond1)
            cond1 = all_conditions[condition_idx].split("_")[1]
            all_cond0.append(cond1)
            all_around_peak_data = pd.concat([all_around_peak_data, around_peak_data.assign(dpf=cond1,
                                                                                            cond1=cond1)])
all_around_peak_data = all_around_peak_data.assign(time_ms = (all_around_peak_data['idx']-peak_idx)/FRAME_RATE*1000)


# %% tidy data
all_cond0 = list(set(all_cond0))
all_cond0.sort()
all_cond0 = list(set(all_cond0))
all_cond0.sort()

all_around_peak_data = all_around_peak_data.reset_index(drop=True)
peak_speed = all_around_peak_data.loc[all_around_peak_data.idx==peak_idx,'propBoutAligned_speed'],

all_around_peak_data = all_around_peak_data.assign(
    linear_accel = all_around_peak_data['propBoutAligned_speed'].diff(),
    ang_accel_of_SMangVel = all_around_peak_data['propBoutAligned_angVel'].diff(),
    heading_sub_pitch = all_around_peak_data['propBoutAligned_instHeading']-all_around_peak_data['propBoutAligned_pitch'],
)

grp = all_around_peak_data.groupby(np.arange(len(all_around_peak_data))//(idxRANGE[1]-idxRANGE[0]))
all_around_peak_data = all_around_peak_data.assign(
                                    peak_speed = np.repeat(peak_speed,(idxRANGE[1]-idxRANGE[0])),
                                    bout_number = grp.ngroup(),
                                )
all_around_peak_data = all_around_peak_data.assign(
                                    speed_bin = pd.cut(all_around_peak_data['peak_speed'],BIN_NUM,labels = np.arange(BIN_NUM))
                                )
print("speed buckets:")
print('--mean')
print(all_around_peak_data.groupby('speed_bin')['peak_speed'].agg('mean'))
print('--min')
print(all_around_peak_data.groupby('speed_bin')['peak_speed'].agg('min'))
print('--max')
print(all_around_peak_data.groupby('speed_bin')['peak_speed'].agg('max'))

# Peak data 
peak_data = all_around_peak_data.loc[all_around_peak_data['idx']==peak_idx].reset_index(drop=True)
peak_grp = peak_data.groupby(['expNum','cond1'],as_index=False)

# assign 
neg_pitch_bout_num = peak_data.loc[peak_data['propBoutAligned_pitch']<0,'bout_number']
pos_pitch_bout_num = peak_data.loc[peak_data['propBoutAligned_pitch']>0,'bout_number']
all_around_peak_data = all_around_peak_data.assign(
    pitch_dir = 'neg_pitch' 
)
all_around_peak_data.loc[all_around_peak_data['bout_number'].isin(pos_pitch_bout_num.values),'pitch_dir'] = 'pos_pitch'

# %%
def smooth_ML(a,WSZ):
    '''
    Modified from Divakar's answer https://stackoverflow.com/questions/404430
    /matlabs-smooth-implementation-n-point-moving-average-in-numpy-python
    a: NumPy 1-D array containing the data to be smoothed
    WSZ: smoothing window size needs, which must be odd number,
    as in the original MATLAB implementation
    '''
    out0 = np.convolve(a,np.ones(WSZ,dtype=int),'valid')/WSZ    
    r = np.arange(1,WSZ-1,2)
    start = np.cumsum(a[:WSZ-1])[::2]/r
    stop = (np.cumsum(a[:-WSZ:-1])[::2]/r)[::-1]
    res = np.concatenate((  start , out0, stop  ))
    return res

import random
# %%
bout_sel = random.randint(0,all_around_peak_data.bout_number.max())
data_sel = all_around_peak_data[all_around_peak_data.bout_number == bout_sel]
smooth_sel = pd.DataFrame({
    'sm_x': smooth_ML(data_sel.loc[:,'propBoutAligned_x'].values,9),
    'sm_y': smooth_ML(data_sel.loc[:,'propBoutAligned_y'].values,9),
    'sm_after': smooth_ML(data_sel.loc[:,'propBoutAligned_speed'].values,9),
})
xy_spd = np.linalg.norm(smooth_sel[['sm_x','sm_y']].diff(), axis=1),
smooth_sel = smooth_sel.assign(sm_before = xy_spd[0]/0.006)

data_sel = data_sel.assign(sm_after = smooth_sel['sm_after'].values,
                           sm_before = smooth_sel['sm_before'].values)

sns.lineplot(x='time_ms', y='propBoutAligned_speed', data=data_sel, color='grey')
sns.lineplot(x='time_ms', y='sm_after', data=data_sel)
sns.lineplot(x='time_ms', y='sm_before', data=data_sel)
# %%

# %%



